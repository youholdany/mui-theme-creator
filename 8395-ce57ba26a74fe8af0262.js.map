{"version":3,"file":"8395-ce57ba26a74fe8af0262.js","mappings":"oOAUWA,GAFqB,oBAAXC,OAAyBC,KAAKD,OAASA,OAE1C,QACPE,EAAW,CAEpBC,aAAc,UACdC,aAAc,MACdC,SAAU,CAAC,QAAS,OAAQ,QAAS,QAAS,WAAY,QAAS,cAAe,WAAY,UAAW,SAAU,KAAM,OAAQ,SAAU,UAAW,QAAS,UAAW,MAAO,OAAQ,WAAY,MAAO,KAAM,SAAU,KAAM,aAAc,MAAO,MAAO,OAAQ,SAAU,MAAO,QAAS,SAAU,SAAU,OAAQ,QAAS,OAAQ,MAAO,SAAU,YAAa,MAAO,OAAQ,QAAS,OAAQ,QAAS,QAAS,QAAS,MACtaC,aAAc,GACdC,UAAW,qBACXC,QAAS,mBACTC,QAAS,mBACTC,OAAQ,kBACRC,YAAa,uBACbC,aAAc,wBACdC,UAAW,qBACXC,UAAW,qBACXC,UAAW,qBACXC,UAAW","sources":["webpack://material-ui-theme-creator/./node_modules/monaco-editor/esm/vs/basic-languages/javascript/javascript.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { conf as tsConf, language as tsLanguage } from '../typescript/typescript.js'; // Allow for running under nodejs/requirejs in tests\n\nvar _monaco = typeof monaco === 'undefined' ? self.monaco : monaco;\n\nexport var conf = tsConf;\nexport var language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  defaultToken: 'invalid',\n  tokenPostfix: '.js',\n  keywords: ['break', 'case', 'catch', 'class', 'continue', 'const', 'constructor', 'debugger', 'default', 'delete', 'do', 'else', 'export', 'extends', 'false', 'finally', 'for', 'from', 'function', 'get', 'if', 'import', 'in', 'instanceof', 'let', 'new', 'null', 'return', 'set', 'super', 'switch', 'symbol', 'this', 'throw', 'true', 'try', 'typeof', 'undefined', 'var', 'void', 'while', 'with', 'yield', 'async', 'await', 'of'],\n  typeKeywords: [],\n  operators: tsLanguage.operators,\n  symbols: tsLanguage.symbols,\n  escapes: tsLanguage.escapes,\n  digits: tsLanguage.digits,\n  octaldigits: tsLanguage.octaldigits,\n  binarydigits: tsLanguage.binarydigits,\n  hexdigits: tsLanguage.hexdigits,\n  regexpctl: tsLanguage.regexpctl,\n  regexpesc: tsLanguage.regexpesc,\n  tokenizer: tsLanguage.tokenizer\n};"],"names":["conf","monaco","self","language","defaultToken","tokenPostfix","keywords","typeKeywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","regexpctl","regexpesc","tokenizer"],"sourceRoot":""}